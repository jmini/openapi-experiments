/*
 * OpenAPI Ice Spell Mint API
 * Test Spec for a \"Simple Client\"
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package fr.jmini.openapi.openapitools.restassured;

import static fr.jmini.openapi.openapitools.restassured.GsonObjectMapper.gson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;

import fr.jmini.openapi.openapitools.restassured.api.DolorApi;
import fr.jmini.openapi.openapitools.restassured.misc.ApiUtil;
import fr.jmini.openapi.openapitools.restassured.misc.PreemptiveBearerAuthScheme;
import fr.jmini.rest.client.tck.AbstractDolorApiTck;
import io.restassured.authentication.PreemptiveBasicAuthScheme;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;

/**
 * API tests for DolorApi
 */
public class DolorApiTckTest extends AbstractDolorApiTck {

    private DolorApi api;
    private String username;
    private String password;
    private String token;

    @Override
    protected void initDolorApi(String basePath, String basicAuthUsername, String basicAuthPassword, String bearerAuthToken) {
        username = basicAuthUsername;
        password = basicAuthPassword;
        token = bearerAuthToken;
        api = ApiClient.api(
            ApiClient.Config.apiConfig()
                .reqSpecSupplier(
                    () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri(basePath)
                )
        )
            .dolor();
    }

    @Override
    protected void performBasicSecCall() throws Exception {
        PreemptiveBasicAuthScheme auth = new PreemptiveBasicAuthScheme();
        auth.setUserName(username);
        auth.setPassword(password);

        api.dolorBasicSec()
            .reqSpec(requestBuilder -> requestBuilder.setAuth(auth))
            .execute(ApiUtil.expectOkNoReturnValueHandler());
    }

    @Override
    protected void performBearerSecCall() throws Exception {
        PreemptiveBearerAuthScheme auth = new PreemptiveBearerAuthScheme();
        auth.setToken(token);

        api.dolorBearerSec()
            .reqSpec(requestBuilder -> requestBuilder.setAuth(auth))
            .execute(ApiUtil.expectOkNoReturnValueHandler());
    }

}