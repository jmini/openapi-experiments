/*
 * OpenAPI Ice Spell Mint API
 * Test Spec for a \"Simple Client\"
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.jmini.openapi.openapitools.restassured;

import static fr.jmini.openapi.openapitools.restassured.GsonObjectMapper.gson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;

import java.util.List;
import java.util.Map;

import fr.jmini.openapi.openapitools.restassured.api.EtiamApi;
import fr.jmini.openapi.openapitools.restassured.model.SomeObj;
import fr.jmini.rest.client.tck.AbstractEtiamApiTck;
/**
 * API tests for EtiamApi
 */
public class EtiamApiTckTest extends AbstractEtiamApiTck<SomeObj> {

    private EtiamApi api;

    @Override
    protected void initEtiamApi(String basePath) {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri(basePath))).etiam();
    }

    @Override
    protected Integer performGetIntCall() throws Exception {
        return api.getInt().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected List<Integer> performGetIntListCall() throws Exception {
        return api.getIntList().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected Map<String, Integer> performGetIntMapCall() throws Exception {
        return api.getIntMap().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected String performGetStringCall() throws Exception {
        return api.getString().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected List<String> performGetStringListCall() throws Exception {
        return api.getStringList().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected Map<String, String> performGetStringMapCall() throws Exception {
        return api.getStringMap().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected SomeObj performGetSomeObjCall() throws Exception {
        return api.getSomeObj().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected List<SomeObj> performGetSomeObjListCall() throws Exception {
        return api.getSomeObjList().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected Map<String, SomeObj> performGetSomeObjMapCall() throws Exception {
        return api.getSomeObjMap().executeAs(ApiUtil.expectOkHandler());
    }

    @Override
    protected SomeObj createSomeObject(Long id, String name) {
        return new SomeObj().id(id).name(name);
    }
}