/*
 * OpenAPI Ice Spell Mint API
 * Test Spec for a \"Simple Client\"
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.jmini.openapi.openapitools.restassured.api;

import com.google.gson.reflect.TypeToken;
import fr.jmini.openapi.openapitools.restassured.model.SomeObj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import fr.jmini.openapi.openapitools.restassured.JSON;

import static io.restassured.http.Method.*;

public class IpsumApi {

    private RequestSpecBuilder reqSpec;

    private IpsumApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static IpsumApi ipsum(RequestSpecBuilder reqSpec) {
        return new IpsumApi(reqSpec);
    }


    public JsonPingDeleteOper jsonPingDelete() {
        return new JsonPingDeleteOper(reqSpec);
    }

    public JsonPingHeadOper jsonPingHead() {
        return new JsonPingHeadOper(reqSpec);
    }

    public JsonPingOptionsOper jsonPingOptions() {
        return new JsonPingOptionsOper(reqSpec);
    }

    public JsonPingPatchOper jsonPingPatch() {
        return new JsonPingPatchOper(reqSpec);
    }

    public JsonPingPostOper jsonPingPost() {
        return new JsonPingPostOper(reqSpec);
    }

    public JsonPingPutOper jsonPingPut() {
        return new JsonPingPutOper(reqSpec);
    }

    public PingDeleteOper pingDelete() {
        return new PingDeleteOper(reqSpec);
    }

    public PingGetOper pingGet() {
        return new PingGetOper(reqSpec);
    }

    public PingHeadOper pingHead() {
        return new PingHeadOper(reqSpec);
    }

    public PingOptionsOper pingOptions() {
        return new PingOptionsOper(reqSpec);
    }

    public PingPatchOper pingPatch() {
        return new PingPatchOper(reqSpec);
    }

    public PingPostOper pingPost() {
        return new PingPostOper(reqSpec);
    }

    public PingPutOper pingPut() {
        return new PingPutOper(reqSpec);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public IpsumApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public class JsonPingDeleteOper {

        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public JsonPingDeleteOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public JsonPingDeleteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingDeleteOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingDeleteOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingDeleteOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public class JsonPingHeadOper {

        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public JsonPingHeadOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public JsonPingHeadOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * HEAD /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(HEAD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingHeadOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingHeadOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingHeadOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public class JsonPingOptionsOper {

        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public JsonPingOptionsOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public JsonPingOptionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * OPTIONS /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(OPTIONS, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingOptionsOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingOptionsOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingOptionsOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public class JsonPingPatchOper {

        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public JsonPingPatchOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public JsonPingPatchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PATCH, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingPatchOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingPatchOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingPatchOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public class JsonPingPostOper {

        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public JsonPingPostOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public JsonPingPostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingPostOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingPostOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingPostOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public class JsonPingPutOper {

        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public JsonPingPutOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public JsonPingPutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingPutOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingPutOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public JsonPingPutOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public class PingDeleteOper {

        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public PingDeleteOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public PingDeleteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingDeleteOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public PingDeleteOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public PingDeleteOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public class PingGetOper {

        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public PingGetOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public PingGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingGetOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public PingGetOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public PingGetOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public class PingHeadOper {

        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public PingHeadOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public PingHeadOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * HEAD /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(HEAD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingHeadOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public PingHeadOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public PingHeadOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public class PingOptionsOper {

        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public PingOptionsOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public PingOptionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * OPTIONS /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(OPTIONS, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingOptionsOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public PingOptionsOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public PingOptionsOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public class PingPatchOper {

        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public PingPatchOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public PingPatchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PATCH, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingPatchOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public PingPatchOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public PingPatchOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public class PingPostOper {

        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public PingPostOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public PingPostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingPostOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public PingPostOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public PingPostOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public class PingPutOper {

        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public PingPutOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public PingPutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingPutOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public PingPutOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public PingPutOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}