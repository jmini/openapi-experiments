/*
 * OpenAPI Ice Spell Mint API
 * Test Spec for a \"Simple Client\"
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.jmini.openapi.openapitools.restassured.api;

import com.google.gson.reflect.TypeToken;
import fr.jmini.openapi.openapitools.restassured.model.SomeObj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import fr.jmini.openapi.openapitools.restassured.JSON;
import static io.restassured.http.Method.*;

@Api(value = "Ipsum")
public class IpsumApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private IpsumApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static IpsumApi ipsum(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new IpsumApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }


    @ApiOperation(value = "",
            notes = "",
            nickname = "helloDelete",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloDeleteOper helloDelete() {
        return new HelloDeleteOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "helloGet",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloGetOper helloGet() {
        return new HelloGetOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "helloHead",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloHeadOper helloHead() {
        return new HelloHeadOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "helloOptions",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloOptionsOper helloOptions() {
        return new HelloOptionsOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "helloPatch",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloPatchOper helloPatch() {
        return new HelloPatchOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "helloPost",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloPostOper helloPost() {
        return new HelloPostOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "helloPut",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloPutOper helloPut() {
        return new HelloPutOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "helloTrace",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public HelloTraceOper helloTrace() {
        return new HelloTraceOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "jsonPingDelete",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public JsonPingDeleteOper jsonPingDelete() {
        return new JsonPingDeleteOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "jsonPingHead",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public JsonPingHeadOper jsonPingHead() {
        return new JsonPingHeadOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "jsonPingOptions",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public JsonPingOptionsOper jsonPingOptions() {
        return new JsonPingOptionsOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "jsonPingPatch",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public JsonPingPatchOper jsonPingPatch() {
        return new JsonPingPatchOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "jsonPingPost",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public JsonPingPostOper jsonPingPost() {
        return new JsonPingPostOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "jsonPingPut",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public JsonPingPutOper jsonPingPut() {
        return new JsonPingPutOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "jsonPingTrace",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public JsonPingTraceOper jsonPingTrace() {
        return new JsonPingTraceOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingDelete",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingDeleteOper pingDelete() {
        return new PingDeleteOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingGet",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingGetOper pingGet() {
        return new PingGetOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingHead",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingHeadOper pingHead() {
        return new PingHeadOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingOptions",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingOptionsOper pingOptions() {
        return new PingOptionsOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingPatch",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingPatchOper pingPatch() {
        return new PingPatchOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingPost",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingPostOper pingPost() {
        return new PingPostOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingPut",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingPutOper pingPut() {
        return new PingPutOper(createReqSpec());
    }

    @ApiOperation(value = "",
            notes = "",
            nickname = "pingTrace",
            tags = { "ipsum" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public PingTraceOper pingTrace() {
        return new PingTraceOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public IpsumApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloDeleteOper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloDeleteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloDeleteOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloDeleteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloDeleteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloGetOper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloGetOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloHeadOper {

        public static final Method REQ_METHOD = HEAD;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloHeadOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * HEAD /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloHeadOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloHeadOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloHeadOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloOptionsOper {

        public static final Method REQ_METHOD = OPTIONS;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloOptionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * OPTIONS /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloOptionsOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloOptionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloOptionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloPatchOper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloPatchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloPatchOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloPatchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloPatchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloPostOper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloPostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloPostOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloPostOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloPostOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloPutOper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloPutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloPutOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloPutOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloPutOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #namePath  (required)
     */
    public static class HelloTraceOper {

        public static final Method REQ_METHOD = TRACE;
        public static final String REQ_URI = "/ipsum/hello/{name}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public HelloTraceOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * TRACE /ipsum/hello/{name}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String NAME_PATH = "name";

        /**
         * @param name (String)  (required)
         * @return operation
         */
        public HelloTraceOper namePath(Object name) {
            reqSpec.addPathParam(NAME_PATH, name);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public HelloTraceOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public HelloTraceOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class JsonPingDeleteOper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JsonPingDeleteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingDeleteOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JsonPingDeleteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JsonPingDeleteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class JsonPingHeadOper {

        public static final Method REQ_METHOD = HEAD;
        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JsonPingHeadOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * HEAD /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingHeadOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JsonPingHeadOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JsonPingHeadOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class JsonPingOptionsOper {

        public static final Method REQ_METHOD = OPTIONS;
        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JsonPingOptionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * OPTIONS /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingOptionsOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JsonPingOptionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JsonPingOptionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class JsonPingPatchOper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JsonPingPatchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingPatchOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JsonPingPatchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JsonPingPatchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class JsonPingPostOper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JsonPingPostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingPostOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JsonPingPostOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JsonPingPostOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class JsonPingPutOper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JsonPingPutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingPutOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JsonPingPutOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JsonPingPutOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class JsonPingTraceOper {

        public static final Method REQ_METHOD = TRACE;
        public static final String REQ_URI = "/ipsum/jsonPing";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JsonPingTraceOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * TRACE /ipsum/jsonPing
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param someObj (SomeObj)  (optional)
         * @return operation
         */
        public JsonPingTraceOper body(SomeObj someObj) {
            reqSpec.setBody(someObj);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JsonPingTraceOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JsonPingTraceOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingDeleteOper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingDeleteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingDeleteOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingDeleteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingDeleteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingGetOper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingGetOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingHeadOper {

        public static final Method REQ_METHOD = HEAD;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingHeadOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * HEAD /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingHeadOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingHeadOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingHeadOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingOptionsOper {

        public static final Method REQ_METHOD = OPTIONS;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingOptionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * OPTIONS /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingOptionsOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingOptionsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingOptionsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingPatchOper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingPatchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingPatchOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingPatchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingPatchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingPostOper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingPostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingPostOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingPostOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingPostOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingPutOper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingPutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingPutOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingPutOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingPutOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #customQuery  (optional)
     */
    public static class PingTraceOper {

        public static final Method REQ_METHOD = TRACE;
        public static final String REQ_URI = "/ipsum/ping";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public PingTraceOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * TRACE /ipsum/ping
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_QUERY = "custom";

        /**
         * @param custom (String)  (optional)
         * @return operation
         */
        public PingTraceOper customQuery(Object... custom) {
            reqSpec.addQueryParam(CUSTOM_QUERY, custom);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public PingTraceOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public PingTraceOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
