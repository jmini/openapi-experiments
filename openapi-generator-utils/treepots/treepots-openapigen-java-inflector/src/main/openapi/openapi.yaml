openapi: 3.0.1
info:
  title: OpenAPI Tree Pots
  description: Example spec
  version: 1.0.0
servers:
- url: http://api.company.xyz/v2
paths:
  /case1:
    get:
      summary: Update an existing pet
      operationId: getCase1
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemWithBoolean'
      x-accepts: application/json
  /issue7754:
    get:
      summary: Codegen
      operationId: issue7754
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongModel'
      x-accepts: application/json
  /pull66:
    get:
      operationId: pull66
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnumInArrayOfArray'
      responses:
        200:
          description: Ok
      x-accepts: application/json
      x-contentType: application/json
  /pull75:
    get:
      operationId: op
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjWithEnums'
      x-accepts: application/json
components:
  schemas:
    ItemWithBoolean:
      type: object
      properties:
        id:
          type: integer
          format: int32
        active:
          type: boolean
        name:
          type: string
      example:
        name: name
        active: true
        id: 0
    LongModel:
      type: object
      properties:
        Long1:
          $ref: '#/components/schemas/LongProperty'
        Long2:
          type: integer
          format: int64
      example:
        Long2: 0
    LongProperty:
      type: integer
      format: int64
    EnumInArrayOfArray:
      type: object
      properties:
        p1:
          type: array
          items:
            type: string
            enum:
            - valA
            - valB
            - valC
        p2:
          type: array
          items:
            type: array
            items:
              type: string
              enum:
              - val1
              - val2
              - val3
        p3:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: string
                enum:
                - lorem
                - ipsum
      example:
        p1:
        - valA
        - valA
        p2:
        - - val1
          - val1
        - - val1
          - val1
        p3:
        - - - lorem
            - lorem
          - - lorem
            - lorem
        - - - lorem
            - lorem
          - - lorem
            - lorem
    ObjWithEnums:
      type: object
      properties:
        SProp:
          $ref: '#/components/schemas/StringEnum'
      example: {}
    StringEnum:
      type: string
      enum:
      - c
      - b
      - a
