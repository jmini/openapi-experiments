openapi: 3.0.1
info:
  title: OpenAPI Tree Pots
  description: Example spec
  version: 1.0.0
servers:
  - url: 'http://api.company.xyz/v2'
paths:
  /case1:
    get:
      summary: Update an existing pet
      operationId: getCase1
      tags:
        - lorem
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemWithBoolean'
  /issue7754:
    get:
      summary: Codegen
      operationId: issue7754
      tags:
        - lorem
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongModel'
  /pull66:
    get:
      operationId: pull66
      tags:
        - lorem
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumInArrayOfArray'
      responses:
        '200':
          description: Ok
  /pull75:
    get:
      operationId: op75
      tags:
        - lorem
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjWithEnums'
  /ipsum/issue199:
    get:
      operationId: op199
      tags:
        - ipsum
      responses:
        '200':
          description: a pet to be returned
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/SomeObject'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /pull708:
    get:
      operationId: op708
      tags:
        - lorem
      parameters:
        - name: bar
          in: query
          required: false
          schema:
            type: string
            default: foobar
      responses:
        default:
          description: successful operation
  /polymorphic:
    get:
      operationId: getPolymorphic
      tags:
        - lorem
      responses:
        '200':
          description: a pet to be returned
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/SomeObject'
components:
  schemas:
    ItemWithBoolean:
      type: object
      properties:
        id:
          type: integer
          format: int32
        active:
          type: boolean
        name:
          type: string

    LongModel:
      type: object
      properties:
        Long1:
          $ref: "#/components/schemas/LongProperty"
        Long2:
          type: integer
          format: int64

    LongProperty:
      type: integer
      format: int64

    EnumInArrayOfArray:
      type: object
      properties:
        p1:
          type: array
          items:
           type: string
           enum:
             - valA
             - valB
             - valC
        p2:
          type: array
          items:
            type: array
            items:
              type: string
              enum:
                - val1
                - val2
                - val3
        p3:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: string
                enum:
                  - lorem
                  - ipsum
                x-enum-varnames:
                  - LOREM_ENUM_VALUE
                  - IPSUM_ENUM_VALUE
                x-enum-descriptions:
                  - 'This is a lorem'
                  - 'This is a ipsum'

    ObjWithEnums:
      type: object
      properties:
        IProp:
            $ref: "#/components/schemas/IntEnum"
        LProp:
            $ref: "#/components/schemas/LongEnum"
        SProp:
            $ref: "#/components/schemas/StringEnum"

    IntEnum:
      type: integer
      format: int32
      enum:
        - 1
        - 2
        - 3

    LongEnum:
      type: integer
      format: int64
      enum:
        - 20
        - 30
        - 40

    StringEnum:
      type: string
      enum:
        - "c"
        - "b"
        - "a"

    EnumWithCustomName:
      type: integer
      format: int32
      enum:
        - 1
        - 2
      x-enum-varnames:
        - FOO
        - BAR

    LongEnumWithCustomName:
      type: integer
      format: int64
      enum:
        - 20
        - 30
        - 40
      x-enum-varnames:
        - TWENTY
        - THIRTY
        - FORTY
      x-enum-descriptions:
        - 'Twenty value'
        - 'Thirty value'
        - 'Forty value'

    Task:
      type: object
      properties:
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
          x-enum-descriptions:
            - 'Open task status'
            - 'Terminated task status'

    Weather:
      type: object
      properties:
        type:
          type: integer
          format: int32
          enum:
            - 1
            - 2
            - 3
          x-enum-descriptions:
            - 'Blue sky'
            - 'Slightly overcast'
            - 'Take an umbrella with you'
          x-enum-varnames:
            - Sunny
            - Cloudy
            - Rainy

    SomeObject:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string

    ErrorModel:
      type: object
      properties:
        statusCode:
          type: integer
          description: http status code
          format: int32
        statusDescription:
          type: string
          description: http status reason phrase
        errorMessage:
          type: string
          description: error description

    Element:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
      properties:
        id:
          type: string
        type:
          type: string

    Node:
      allOf:
        - $ref: '#/components/schemas/Element'
        - type: object
          properties:
            childrenIds:
              type: array
              items:
                type: string
    Leave:
      allOf:
        - $ref: '#/components/schemas/Element'
        - type: object
          properties:
            value:
              type: string